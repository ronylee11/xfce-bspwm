"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const events_1=require("events"),zmq=require(".");let count=1;const types={ZMQ_PAIR:0,ZMQ_PUB:1,ZMQ_SUB:2,ZMQ_REQ:3,ZMQ_REP:4,ZMQ_DEALER:5,ZMQ_XREQ:5,ZMQ_ROUTER:6,ZMQ_XREP:6,ZMQ_PULL:7,ZMQ_PUSH:8,ZMQ_XPUB:9,ZMQ_XSUB:10,ZMQ_STREAM:11},longOptions={ZMQ_AFFINITY:4,ZMQ_IDENTITY:5,ZMQ_SUBSCRIBE:6,ZMQ_UNSUBSCRIBE:7,ZMQ_RATE:8,ZMQ_RECOVERY_IVL:9,ZMQ_RECOVERY_IVL_MSEC:9,ZMQ_SNDBUF:11,ZMQ_RCVBUF:12,ZMQ_RCVMORE:13,ZMQ_FD:14,ZMQ_EVENTS:15,ZMQ_TYPE:16,ZMQ_LINGER:17,ZMQ_RECONNECT_IVL:18,ZMQ_BACKLOG:19,ZMQ_RECONNECT_IVL_MAX:21,ZMQ_MAXMSGSIZE:22,ZMQ_SNDHWM:23,ZMQ_RCVHWM:24,ZMQ_MULTICAST_HOPS:25,ZMQ_RCVTIMEO:27,ZMQ_SNDTIMEO:28,ZMQ_IPV4ONLY:31,ZMQ_LAST_ENDPOINT:32,ZMQ_ROUTER_MANDATORY:33,ZMQ_TCP_KEEPALIVE:34,ZMQ_TCP_KEEPALIVE_CNT:35,ZMQ_TCP_KEEPALIVE_IDLE:36,ZMQ_TCP_KEEPALIVE_INTVL:37,ZMQ_TCP_ACCEPT_FILTER:38,ZMQ_DELAY_ATTACH_ON_CONNECT:39,ZMQ_XPUB_VERBOSE:40,ZMQ_ROUTER_RAW:41,ZMQ_IPV6:42,ZMQ_MECHANISM:43,ZMQ_PLAIN_SERVER:44,ZMQ_PLAIN_USERNAME:45,ZMQ_PLAIN_PASSWORD:46,ZMQ_CURVE_SERVER:47,ZMQ_CURVE_PUBLICKEY:48,ZMQ_CURVE_SECRETKEY:49,ZMQ_CURVE_SERVERKEY:50,ZMQ_ZAP_DOMAIN:55,ZMQ_HEARTBEAT_IVL:75,ZMQ_HEARTBEAT_TTL:76,ZMQ_HEARTBEAT_TIMEOUT:77,ZMQ_CONNECT_TIMEOUT:79,ZMQ_IO_THREADS:1,ZMQ_MAX_SOCKETS:2,ZMQ_ROUTER_HANDOVER:56},pollStates={ZMQ_POLLIN:1,ZMQ_POLLOUT:2,ZMQ_POLLERR:4},sendOptions={ZMQ_SNDMORE:2},capabilities={ZMQ_CAN_MONITOR:1,ZMQ_CAN_DISCONNECT:1,ZMQ_CAN_UNBIND:1,ZMQ_CAN_SET_CTX:1},socketStates={STATE_READY:0,STATE_BUSY:1,STATE_CLOSED:2},shortOptions={_fd:longOptions.ZMQ_FD,_ioevents:longOptions.ZMQ_EVENTS,_receiveMore:longOptions.ZMQ_RCVMORE,_subscribe:longOptions.ZMQ_SUBSCRIBE,_unsubscribe:longOptions.ZMQ_UNSUBSCRIBE,affinity:longOptions.ZMQ_AFFINITY,backlog:longOptions.ZMQ_BACKLOG,identity:longOptions.ZMQ_IDENTITY,linger:longOptions.ZMQ_LINGER,rate:longOptions.ZMQ_RATE,rcvbuf:longOptions.ZMQ_RCVBUF,last_endpoint:longOptions.ZMQ_LAST_ENDPOINT,reconnect_ivl:longOptions.ZMQ_RECONNECT_IVL,recovery_ivl:longOptions.ZMQ_RECOVERY_IVL,sndbuf:longOptions.ZMQ_SNDBUF,mechanism:longOptions.ZMQ_MECHANISM,plain_server:longOptions.ZMQ_PLAIN_SERVER,plain_username:longOptions.ZMQ_PLAIN_USERNAME,plain_password:longOptions.ZMQ_PLAIN_PASSWORD,curve_server:longOptions.ZMQ_CURVE_SERVER,curve_publickey:longOptions.ZMQ_CURVE_PUBLICKEY,curve_secretkey:longOptions.ZMQ_CURVE_SECRETKEY,curve_serverkey:longOptions.ZMQ_CURVE_SERVERKEY,zap_domain:longOptions.ZMQ_ZAP_DOMAIN,heartbeat_ivl:longOptions.ZMQ_HEARTBEAT_IVL,heartbeat_ttl:longOptions.ZMQ_HEARTBEAT_TTL,heartbeat_timeout:longOptions.ZMQ_HEARTBEAT_TIMEOUT,connect_timeout:longOptions.ZMQ_CONNECT_TIMEOUT};exports.options=shortOptions;class Context{static setMaxThreads(e){zmq.context.ioThreads=e}static getMaxThreads(){return zmq.context.ioThreads}static setMaxSockets(e){zmq.context.maxSockets=e}static getMaxSockets(){return zmq.context.maxSockets}constructor(){throw new Error("Context cannot be instantiated in compatibility mode")}}exports.Context=Context;class Socket extends events_1.EventEmitter{constructor(e){switch(super(),this._msg=[],this._recvQueue=[],this._sendQueue=[],this._paused=!1,this._count=0,this.type=e,e){case"pair":this._socket=new zmq.Pair;break;case"req":this._socket=new zmq.Request;break;case"rep":this._socket=new zmq.Reply;break;case"pub":this._socket=new zmq.Publisher;break;case"sub":this._socket=new zmq.Subscriber;break;case"dealer":case"xreq":this._socket=new zmq.Dealer;break;case"router":case"xrep":this._socket=new zmq.Router;break;case"pull":this._socket=new zmq.Pull;break;case"push":this._socket=new zmq.Push;break;case"xpub":this._socket=new zmq.XPublisher;break;case"xsub":this._socket=new zmq.XSubscriber;break;case"stream":this._socket=new zmq.Stream}const t=async()=>{this.once("_flushRecv",(async()=>{for(;!this._socket.closed&&!this._paused;)await this._recv();this._socket.closed||t()}))},s=()=>{this.once("_flushSend",(async()=>{for(;!this._socket.closed&&!this._paused&&this._sendQueue.length;)await this._send();this._socket.closed||s()}))};"push"!==e&&"pub"!==e&&t(),s(),this.emit("_flushRecv")}async _recv(){if(this._socket instanceof zmq.Push||this._socket instanceof zmq.Publisher)throw new Error("Cannot receive on this socket type.");try{if(this._recvQueue.length){const e=this._recvQueue.shift();process.nextTick((()=>this.emit("message",...e)))}{const e=await this._socket.receive();this._paused?this._recvQueue.push(e):process.nextTick((()=>this.emit("message",...e)))}}catch(e){this._socket.closed||"EBUSY"===e.code||process.nextTick((()=>this.emit("error",e)))}}async _send(){if(this._socket instanceof zmq.Pull||this._socket instanceof zmq.Subscriber)throw new Error("Cannot send on this socket type.");if(this._sendQueue.length){const[e,t]=this._sendQueue.shift();try{await this._socket.send(e),t&&t()}catch(e){t?t(e):this.emit("error",e)}}}bind(e,t){return this._socket.bind(e).then((()=>{process.nextTick((()=>{this.emit("bind",e),t&&t()}))})).catch((e=>{process.nextTick((()=>{t?t(e):this.emit("error",e)}))})),this}unbind(e,t){return this._socket.unbind(e).then((()=>{process.nextTick((()=>{this.emit("unbind",e),t&&t()}))})).catch((e=>{process.nextTick((()=>{t?t(e):this.emit("error",e)}))})),this}connect(e){return this._socket.connect(e),this}disconnect(e){return this._socket.disconnect(e),this}send(e,t=0,s){return t|=0,this._msg=this._msg.concat(e),0==(t&sendOptions.ZMQ_SNDMORE)&&(this._sendQueue.push([this._msg,s]),this._msg=[],this._paused||this.emit("_flushSend")),this}read(){throw new Error("read() has been removed from compatibility mode; use on('message', ...) instead.")}bindSync(...e){try{Object.defineProperty(this,"bindSync",{value:require("deasync")(this.bind)})}catch(e){throw new Error("bindSync() has been removed from compatibility mode; use bind() instead, or add 'deasync' to your project dependencies")}this.bindSync(...e)}unbindSync(...e){try{Object.defineProperty(this,"unbindSync",{value:require("deasync")(this.unbind)})}catch(e){throw new Error("unbindSync() has been removed from compatibility mode; use unbind() instead, or add 'deasync' to your project dependencies")}this.unbindSync(...e)}pause(){this._paused=!0}resume(){this._paused=!1,this.emit("_flushRecv"),this.emit("_flushSend")}close(){return this._socket.close(),this}get closed(){return this._socket.closed}monitor(e,t){this._count=count++,this._count,(e||t)&&process.emitWarning("Arguments to monitor() are ignored in compatibility mode; all events are read automatically");const s=this._socket.events;return(async()=>{for(;!s.closed;)try{const e=await s.receive();let t,o,n=e.type;switch(e.type){case"connect":case"accept":case"close":case"disconnect":break;case"connect:delay":n="connect_delay";break;case"connect:retry":t=e.interval,n="connect_retry";break;case"bind":n="listen";break;case"bind:error":o=e.error,t=e.error?e.error.errno:0,n="bind_error";break;case"accept:error":o=e.error,t=e.error?e.error.errno:0,n="accept_error";break;case"close:error":o=e.error,t=e.error?e.error.errno:0,n="close_error";break;case"end":return;default:continue}this.emit(n,t,e.address,o)}catch(e){this._socket.closed||this.emit("error",e)}})(),this}unmonitor(){return this._socket.events.close(),this}subscribe(e){if(this._socket instanceof zmq.Subscriber)return this._socket.subscribe(e),this;throw new Error("Subscriber socket required")}unsubscribe(e){if(this._socket instanceof zmq.Subscriber)return this._socket.unsubscribe(e),this;throw new Error("Subscriber socket required")}setsockopt(e,t){switch(e="number"!=typeof e?shortOptions[e]:e){case longOptions.ZMQ_AFFINITY:this._socket.affinity=t;break;case longOptions.ZMQ_IDENTITY:this._socket.routingId=t;break;case longOptions.ZMQ_SUBSCRIBE:this._socket.subscribe(t);break;case longOptions.ZMQ_UNSUBSCRIBE:this._socket.unsubscribe(t);break;case longOptions.ZMQ_RATE:this._socket.rate=t;break;case longOptions.ZMQ_RECOVERY_IVL:this._socket.recoveryInterval=t;break;case longOptions.ZMQ_SNDBUF:this._socket.sendBufferSize=t;break;case longOptions.ZMQ_RCVBUF:this._socket.receiveBufferSize=t;break;case longOptions.ZMQ_LINGER:this._socket.linger=t;break;case longOptions.ZMQ_RECONNECT_IVL:this._socket.reconnectInterval=t;break;case longOptions.ZMQ_BACKLOG:this._socket.backlog=t;break;case longOptions.ZMQ_RECOVERY_IVL_MSEC:this._socket.recoveryInterval=t;break;case longOptions.ZMQ_RECONNECT_IVL_MAX:this._socket.reconnectMaxInterval=t;break;case longOptions.ZMQ_MAXMSGSIZE:this._socket.maxMessageSize=t;break;case longOptions.ZMQ_SNDHWM:this._socket.sendHighWaterMark=t;break;case longOptions.ZMQ_RCVHWM:this._socket.receiveHighWaterMark=t;break;case longOptions.ZMQ_MULTICAST_HOPS:this._socket.multicastHops=t;break;case longOptions.ZMQ_RCVTIMEO:this._socket.receiveTimeout=t;break;case longOptions.ZMQ_SNDTIMEO:this._socket.sendTimeout=t;break;case longOptions.ZMQ_IPV4ONLY:this._socket.ipv6=!t;break;case longOptions.ZMQ_ROUTER_MANDATORY:this._socket.mandatory=!!t;break;case longOptions.ZMQ_TCP_KEEPALIVE:this._socket.tcpKeepalive=t;break;case longOptions.ZMQ_TCP_KEEPALIVE_CNT:this._socket.tcpKeepaliveCount=t;break;case longOptions.ZMQ_TCP_KEEPALIVE_IDLE:this._socket.tcpKeepaliveIdle=t;break;case longOptions.ZMQ_TCP_KEEPALIVE_INTVL:this._socket.tcpKeepaliveInterval=t;break;case longOptions.ZMQ_TCP_ACCEPT_FILTER:this._socket.tcpAcceptFilter=t;break;case longOptions.ZMQ_DELAY_ATTACH_ON_CONNECT:this._socket.immediate=!!t;break;case longOptions.ZMQ_XPUB_VERBOSE:this._socket.verbosity=t?"allSubs":null;break;case longOptions.ZMQ_ROUTER_RAW:throw new Error("ZMQ_ROUTER_RAW is not supported in compatibility mode");case longOptions.ZMQ_IPV6:this._socket.ipv6=!!t;break;case longOptions.ZMQ_PLAIN_SERVER:this._socket.plainServer=!!t;break;case longOptions.ZMQ_PLAIN_USERNAME:this._socket.plainUsername=t;break;case longOptions.ZMQ_PLAIN_PASSWORD:this._socket.plainPassword=t;break;case longOptions.ZMQ_CURVE_SERVER:this._socket.curveServer=!!t;break;case longOptions.ZMQ_CURVE_PUBLICKEY:this._socket.curvePublicKey=t;break;case longOptions.ZMQ_CURVE_SECRETKEY:this._socket.curveSecretKey=t;break;case longOptions.ZMQ_CURVE_SERVERKEY:this._socket.curveServerKey=t;break;case longOptions.ZMQ_ZAP_DOMAIN:this._socket.zapDomain=t;break;case longOptions.ZMQ_HEARTBEAT_IVL:this._socket.heartbeatInterval=t;break;case longOptions.ZMQ_HEARTBEAT_TTL:this._socket.heartbeatTimeToLive=t;break;case longOptions.ZMQ_HEARTBEAT_TIMEOUT:this._socket.heartbeatTimeout=t;break;case longOptions.ZMQ_CONNECT_TIMEOUT:this._socket.connectTimeout=t;break;case longOptions.ZMQ_ROUTER_HANDOVER:this._socket.handover=!!t;break;default:throw new Error("Unknown option")}return this}getsockopt(e){switch(e="number"!=typeof e?shortOptions[e]:e){case longOptions.ZMQ_AFFINITY:return this._socket.affinity;case longOptions.ZMQ_IDENTITY:return this._socket.routingId;case longOptions.ZMQ_RATE:return this._socket.rate;case longOptions.ZMQ_RECOVERY_IVL:return this._socket.recoveryInterval;case longOptions.ZMQ_SNDBUF:return this._socket.sendBufferSize;case longOptions.ZMQ_RCVBUF:return this._socket.receiveBufferSize;case longOptions.ZMQ_RCVMORE:throw new Error("ZMQ_RCVMORE is not supported in compatibility mode");case longOptions.ZMQ_FD:throw new Error("ZMQ_FD is not supported in compatibility mode");case longOptions.ZMQ_EVENTS:return(this._socket.readable?pollStates.ZMQ_POLLIN:0)|(this._socket.writable?pollStates.ZMQ_POLLOUT:0);case longOptions.ZMQ_TYPE:return this._socket.type;case longOptions.ZMQ_LINGER:return this._socket.linger;case longOptions.ZMQ_RECONNECT_IVL:return this._socket.reconnectInterval;case longOptions.ZMQ_BACKLOG:return this._socket.backlog;case longOptions.ZMQ_RECOVERY_IVL_MSEC:return this._socket.recoveryInterval;case longOptions.ZMQ_RECONNECT_IVL_MAX:return this._socket.reconnectMaxInterval;case longOptions.ZMQ_MAXMSGSIZE:return this._socket.maxMessageSize;case longOptions.ZMQ_SNDHWM:return this._socket.sendHighWaterMark;case longOptions.ZMQ_RCVHWM:return this._socket.receiveHighWaterMark;case longOptions.ZMQ_MULTICAST_HOPS:return this._socket.multicastHops;case longOptions.ZMQ_RCVTIMEO:return this._socket.receiveTimeout;case longOptions.ZMQ_SNDTIMEO:return this._socket.sendTimeout;case longOptions.ZMQ_IPV4ONLY:return!this._socket.ipv6;case longOptions.ZMQ_LAST_ENDPOINT:return this._socket.lastEndpoint;case longOptions.ZMQ_ROUTER_MANDATORY:return this._socket.mandatory?1:0;case longOptions.ZMQ_TCP_KEEPALIVE:return this._socket.tcpKeepalive;case longOptions.ZMQ_TCP_KEEPALIVE_CNT:return this._socket.tcpKeepaliveCount;case longOptions.ZMQ_TCP_KEEPALIVE_IDLE:return this._socket.tcpKeepaliveIdle;case longOptions.ZMQ_TCP_KEEPALIVE_INTVL:return this._socket.tcpKeepaliveInterval;case longOptions.ZMQ_DELAY_ATTACH_ON_CONNECT:return this._socket.immediate?1:0;case longOptions.ZMQ_XPUB_VERBOSE:throw new Error("Reading ZMQ_XPUB_VERBOSE is not supported");case longOptions.ZMQ_ROUTER_RAW:throw new Error("ZMQ_ROUTER_RAW is not supported in compatibility mode");case longOptions.ZMQ_IPV6:return this._socket.ipv6?1:0;case longOptions.ZMQ_MECHANISM:switch(this._socket.securityMechanism){case"plain":return 1;case"curve":return 2;case"gssapi":return 3;default:return 0}case longOptions.ZMQ_PLAIN_SERVER:return this._socket.plainServer?1:0;case longOptions.ZMQ_PLAIN_USERNAME:return this._socket.plainUsername;case longOptions.ZMQ_PLAIN_PASSWORD:return this._socket.plainPassword;case longOptions.ZMQ_CURVE_SERVER:return this._socket.curveServer?1:0;case longOptions.ZMQ_CURVE_PUBLICKEY:return this._socket.curvePublicKey;case longOptions.ZMQ_CURVE_SECRETKEY:return this._socket.curveSecretKey;case longOptions.ZMQ_CURVE_SERVERKEY:return this._socket.curveServerKey;case longOptions.ZMQ_ZAP_DOMAIN:return this._socket.zapDomain;case longOptions.ZMQ_HEARTBEAT_IVL:return this._socket.heartbeatInterval;case longOptions.ZMQ_HEARTBEAT_TTL:return this._socket.heartbeatTimeToLive;case longOptions.ZMQ_HEARTBEAT_TIMEOUT:return this._socket.heartbeatTimeout;case longOptions.ZMQ_CONNECT_TIMEOUT:return this._socket.connectTimeout;default:throw new Error("Unknown option")}}}exports.Socket=Socket;for(const e in shortOptions)shortOptions.hasOwnProperty(e)&&(Socket.prototype.hasOwnProperty(e)||Object.defineProperty(Socket.prototype,e,{get(){return this.getsockopt(shortOptions[e])},set(t){return"string"==typeof t&&(t=Buffer.from(t,"utf8")),this.setsockopt(shortOptions[e],t)}}));function createSocket(e,t={}){const s=new Socket(e);for(const e in t)t.hasOwnProperty(e)&&(s[e]=t[e]);return s}function curveKeypair(){const{publicKey:e,secretKey:t}=zmq.curveKeyPair();return{public:e,secret:t}}function proxy(e,t,s){switch(e.type+"/"+t.type){case"push/pull":case"pull/push":case"xpub/xsub":e.on("message",((...e)=>{t.send(e)})),s?t.on("message",((...t)=>{e.send(t),s.send(t)})):t.on("message",((...t)=>{e.send(t)}));break;case"router/dealer":case"xrep/xreq":e.on("message",((...e)=>{t.send(e)})),s?t.on("message",((...t)=>{e.send(t),s.send(t.slice(2))})):t.on("message",((...t)=>{e.send(t)}));break;default:throw new Error("This socket type order is not supported in compatibility mode")}}exports.socket=createSocket,exports.createSocket=createSocket,exports.curveKeypair=curveKeypair,exports.proxy=proxy;const version=zmq.version;exports.version=version,Object.assign(module.exports,longOptions),Object.assign(module.exports,types),Object.assign(module.exports,pollStates),Object.assign(module.exports,sendOptions),Object.assign(module.exports,socketStates),Object.assign(module.exports,capabilities);