{"version":3,"sources":["../../external \"vscode\"","../../webpack/bootstrap","../.././src/extension/index.ts"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","async","context","onDidReceiveMessage","EventEmitter","messaging","notebooks","createRendererMessaging","subscriptions","push","editor","message","msg","type","fire","postMessage","response","extensions","getExtension","then","fulfilled","console","log","ex","error","event"],"mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,YCCrBC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,Q,0FClBf,eAGA,WAAOQ,eACHC,GAIA,MAAMC,EAAsB,IAAI,EAAAC,aAI1BC,EAAY,EAAAC,UAAUC,wBAAwB,6BAgCpD,OA/BAL,EAAQM,cAAcC,KAClBJ,EAAUF,qBAAoB,EAAGO,SAAQC,cACrC,MAAMC,EAAMD,EACPC,EAAIC,OAGQ,gCAAbD,EAAIC,KAiBRV,EAAoBW,KAAK,CAAEJ,SAAQC,QAASC,IAhBnCP,EACAU,YACgC,CACzBF,KAAM,8BACNG,WAAY,EAAAC,WAAWC,aAAa,uBAExCR,GAEHS,MACIC,IACGC,QAAQC,IAAI,aAAcF,MAE7BG,GAAOF,QAAQG,MAAM,iBAAkBD,UAO5DlB,EAAUU,YAAyC,CAC/CF,KAAM,8BACNG,WAAY,EAAAC,WAAWC,aAAa,wBAGjC,CACHf,oBAAqBA,EAAoBsB,S","file":"index.js","sourcesContent":["module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Event, EventEmitter, ExtensionContext, notebooks, extensions, NotebookEditor } from 'vscode';\nimport { OpenImageInPlotViewer, SaveImageAs, IsJupyterExtensionInstalled } from './constants';\n\nexport async function activate(\n    context: ExtensionContext\n): Promise<{\n    onDidReceiveMessage: Event<{ editor: NotebookEditor; message: OpenImageInPlotViewer | SaveImageAs }>;\n}> {\n    const onDidReceiveMessage = new EventEmitter<{\n        editor: NotebookEditor;\n        message: OpenImageInPlotViewer | SaveImageAs;\n    }>();\n    const messaging = notebooks.createRendererMessaging('jupyter-notebook-renderer');\n    context.subscriptions.push(\n        messaging.onDidReceiveMessage(({ editor, message }) => {\n            const msg = message as OpenImageInPlotViewer | SaveImageAs | IsJupyterExtensionInstalled;\n            if (!msg.type) {\n                return;\n            }\n            if (msg.type === 'isJupyterExtensionInstalled') {\n                void messaging\n                    .postMessage(\n                        <IsJupyterExtensionInstalled>{\n                            type: 'isJupyterExtensionInstalled',\n                            response: !!extensions.getExtension('ms-toolsai.jupyter')\n                        },\n                        editor\n                    )\n                    .then(\n                        (fulfilled) => {\n                            console.log('Sent to UI', fulfilled);\n                        },\n                        (ex) => console.error('Failed to send', ex)\n                    );\n                return;\n            }\n            onDidReceiveMessage.fire({ editor, message: msg });\n        })\n    );\n    messaging.postMessage(<IsJupyterExtensionInstalled>{\n        type: 'isJupyterExtensionInstalled',\n        response: !!extensions.getExtension('ms-toolsai.jupyter')\n    });\n\n    return {\n        onDidReceiveMessage: onDidReceiveMessage.event\n    };\n}\n"],"sourceRoot":""}