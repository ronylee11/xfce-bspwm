{
    "ClassComponent": {
        "prefix": "_cc",
        "body": [
            "import React from \"react\";",
            "",
            "class ${0} extends React.Component {",
            "    state = {",
            "        loading: true,",
            "        error: null,",
            "    };",
            "",
            "    componentDidMount() {",
            "        init();",
            "    }",
            "",
            "    init = () => {",
            "        ",
            "    }",
            "",
            "    render() {",
            "        return (",
            "           <${0}View {...this.state} />",
            "        );",
            "    }",
            "}",
            "",
            "export default ${0};"
        ],
        "description": "Generates an empty react class with loading and error state."
    },
    "ViewComponent": {
        "prefix": "_vc",
        "body": [
            "import React from \"react\";",
            "",
            "export const ${1} = (props) => {",
            "    return (",
            "       <div className=\"${2}-view\">",
            "       </div>",
            "    );",
            "}"
        ],
        "description": "Generates an empty react view function."
    },
    "ClassFunction": {
        "prefix": "_cfoo",
        "body": ["${1} = () => {", "    ${2}", "}"],
        "description": "Generates an empty class arrow function."
    },
    "Function": {
        "prefix": "_foo",
        "body": ["const ${1} = (${2}) => {", "    ${3}", "}"],
        "description": "Generates an empty arrow function."
    },
    "ImportReact": {
        "prefix": "_imr",
        "body": ["import React from \"react\""],
        "description": "Imports react."
    },
    "StateCloneToProps": {
        "prefix": "_sttp",
        "body": ["{...this.state}"],
        "description": "Clones the state to props."
    },
    "PropCloneToProps": {
        "prefix": "_ptp",
        "body": ["{...this.props}"],
        "description": "Clones the props to props."
    },
    "GenerateModel": {
        "prefix": "_mo",
        "body": [
            "export class ${1}Model {",
            "    constructor(data) {",
            "        if (!data) return;",
            "",
            "        for (let key in this) {",
            "            const value = data[key];",
            "",
            "            if (!value || value instanceof Array || typeof value === \"object\") continue;",
            "",
            "            this[key] = `${ value }`;",
            "        }",
            "",
            "    }",
            "",
            "    ${2} = \"\"; // string",
            "}"
        ],
        "description": "Generates a model instance."
    },
    "ModelUtilsFile": {
        "prefix": "_mu",
        "body": [
            "export const setBool = (data) => {",
            "    if (typeof data === \"boolean\") return data;",
            "",
            "    if (data === \"1\" || data === \"true\") return true;",
            "    return false;",
            "};",
            "",
            "export const setString = (data) => {",
            "    return `${ data }`;",
            "};",
            "",
            "export const setNumber = (data, defaultValue = 0) => {",
            "    if (typeof data === \"number\") return data;",
            "    if (isNaN(data)) return defaultValue;",
            "    return Number(data);",
            "};",
            "",
            "export const valueChecker = (base, data) => {",
            "    if (!data) return base;",
            "    if (typeof base === \"string\") return setString(data);",
            "    if (typeof base === \"number\") return setNumber(data);",
            "    if (typeof base === \"boolean\") return setBool(data);",
            "",
            "    return base;",
            "};",
            "",
            "/**",
            " * This function loops through the keys of 'this' and checks their types.",
            " * If the same key exists on the incoming data object as well,",
            " * **valueChecker** will run the related function on the data value",
            " * and transform it to the format that's defined in the model.",
            " * If the type of the base value isn't string, number, or boolean, or if data is void,",
            " * it will return the base value instead of trying to transform the data.",
            " */",
            "export const ModelConstructor = (baseValues, dataValues) => {",
            "    for (let key in baseValues) {",
            "        baseValues[key] = valueChecker(baseValues[key], dataValues[key]);",
            "    }",
            "};"
        ],
        "description": "Generates a model utils file content which can be used in models to parse the REST API data to the required formats."
    },
    "GenerateAutoFillModel": {
        "prefix": "_moauto",
        "body": [
            "export class ${1}Model {",
            "    constructor(data) {",
            "        if (!data) return;",
            "        ModelConstructor(this, data);",
            "    }",
            "",
            "    ${2} = \"\"; // string",
            "}"
        ],
        "description": "Generates a model instance which implements the ModelConstructor."
    }
}
