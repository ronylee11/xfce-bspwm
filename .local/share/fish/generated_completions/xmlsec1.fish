# xmlsec1
# Autogenerated from man page /usr/share/man/man1/xmlsec1.1.gz
complete -c xmlsec1 -l help -d 'display this help information and exit'
complete -c xmlsec1 -l help-all -d 'display help information for all commands/options and exit'
complete -c xmlsec1 -l 'help-<cmd>' -d 'display help information for command <cmd> and exit'
complete -c xmlsec1 -l version -d 'print version information and exit'
complete -c xmlsec1 -l keys -d 'keys XML file manipulation'
complete -c xmlsec1 -l sign -d 'sign data and output XML document'
complete -c xmlsec1 -l verify -d 'verify signed document'
complete -c xmlsec1 -l sign-tmpl -d 'create and sign dynamicaly generated signature template'
complete -c xmlsec1 -l encrypt -d 'encrypt data and output XML document'
complete -c xmlsec1 -l decrypt -d 'decrypt data from XML document OPTIONS'
complete -c xmlsec1 -l ignore-manifests -d 'do not process <dsig:Manifest> elements'
complete -c xmlsec1 -l store-references -d 'store and print the result of <dsig:Reference/> element processing just befor…'
complete -c xmlsec1 -l store-signatures -d 'store and print the result of <dsig:Signature> processing just before calcula…'
complete -c xmlsec1 -l enabled-reference-uris -d 'comma separated list of of the following values: "empty", "same-doc", "local"…'
complete -c xmlsec1 -l enable-visa3d-hack -d 'enables Visa3D protocol specific hack for URI attributes processing when we a…'
complete -c xmlsec1 -l binary-data -d 'binary <file> to encrypt'
complete -c xmlsec1 -l xml-data -d 'XML <file> to encrypt'
complete -c xmlsec1 -l enabled-cipher-reference-uris -d 'comma separated list of of the following values: "empty", "same-doc", "local"…'
complete -c xmlsec1 -l session-key -d 'generate new session <keyKlass> key of <keySize> bits size (for example, "--s…'
complete -c xmlsec1 -l output -d 'write result document to file <filename>'
complete -c xmlsec1 -l print-debug -d 'print debug information to stdout'
complete -c xmlsec1 -l print-xml-debug -d 'print debug information to stdout in xml format'
complete -c xmlsec1 -l dtd-file -d 'load the specified file as the DTD'
complete -c xmlsec1 -l node-id -d 'set the operation start point to the node with given <id>'
complete -c xmlsec1 -l node-name -d 'set the operation start point to the first node with given <name> and <namesp…'
complete -c xmlsec1 -l node-xpath -d 'set the operation start point to the first node selected by the specified XPa…'
complete -c xmlsec1 -l id-attr -d 'adds attributes <attr-name> (default value "id") from all nodes with<node-nam…'
complete -c xmlsec1 -l enabled-key-data -d 'comma separated list of enabled key data (list of registered key data klasses…'
complete -c xmlsec1 -l enabled-retrieval-uris -d 'comma separated list of of the following values: "empty", "same-doc", "local"…'
complete -c xmlsec1 -l gen-key -d 'generate new <keyKlass> key of <keySize> bits size, set the key name to <name…'
complete -c xmlsec1 -l keys-file -d 'load keys from XML file'
complete -c xmlsec1 -l privkey-pem -d 'load private key from PEM file and certificates that verify this key'
complete -c xmlsec1 -l privkey-der -d 'load private key from DER file and certificates that verify this key'
complete -c xmlsec1 -l pkcs8-pem -d 'load private key from PKCS8 PEM file and PEM certificates that verify this key'
complete -c xmlsec1 -l pkcs8-der -d 'load private key from PKCS8 DER file and DER certificates that verify this key'
complete -c xmlsec1 -l pubkey-pem -d 'load public key from PEM file'
complete -c xmlsec1 -l pubkey-der -d 'load public key from DER file'
complete -c xmlsec1 -l aeskey -d 'load AES key from binary file <file>'
complete -c xmlsec1 -l deskey -d 'load DES key from binary file <file>'
complete -c xmlsec1 -l hmackey -d 'load HMAC key from binary file <file>'
complete -c xmlsec1 -l pwd -d 'the password to use for reading keys and certs'
complete -c xmlsec1 -l pkcs12 -d 'load load private key from pkcs12 file <file>'
complete -c xmlsec1 -l pkcs12-persist -d 'persist loaded private key'
complete -c xmlsec1 -l pubkey-cert-pem -d 'load public key from PEM cert file'
complete -c xmlsec1 -l pubkey-cert-der -d 'load public key from DER cert file'
complete -c xmlsec1 -l trusted-pem -d 'load trusted (root) certificate from PEM file <file>'
complete -c xmlsec1 -l untrusted-pem -d 'load untrusted certificate from PEM file <file>'
complete -c xmlsec1 -l trusted-der -d 'load trusted (root) certificate from DER file <file>'
complete -c xmlsec1 -l untrusted-der -d 'load untrusted certificate from DER file <file>'
complete -c xmlsec1 -l verification-time -d 'the local time in "YYYY-MM-DD HH:MM:SS" format used certificates verification'
complete -c xmlsec1 -l depth -d 'maximum certificates chain depth'
complete -c xmlsec1 -l X509-skip-strict-checks -d 'skip strict checking of X509 data'
complete -c xmlsec1 -l insecure -d 'do not verify certificates'
complete -c xmlsec1 -l privkey-openssl-engine -d 'load private key by OpenSSL ENGINE interface; specify the name of engine (lik…'
complete -c xmlsec1 -l crypto -d 'the name of the crypto engine to use from the following list: openssl, mscryp…'
complete -c xmlsec1 -l crypto-config -d 'path to crypto engine configuration'
complete -c xmlsec1 -l repeat -d 'repeat the operation <number> times'
complete -c xmlsec1 -l disable-error-msgs -d 'do not print xmlsec error messages'
complete -c xmlsec1 -l print-crypto-error-msgs -d 'print errors stack at the end'
complete -c xmlsec1 -l xxe -d 'enable External Entity resolution'
complete -c xmlsec1 -l 'url-map:<url>' -d 'maps a given <url> to the given <file> for loading external resources AUTHOR …'

